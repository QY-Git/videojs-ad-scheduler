/*! ott-player-library - v0.0.0 - 2015-6-11
 * Copyright (c) 2015 Stevennick Ciou
 * Copyright(C) 2015 ITRI, All Rights Reserved. */
(function(window, videojs) {
  'use strict';

  var defaults = {
    poster: 'black_128.png',
    requestUrl: '',
    option: true,
    // seconds before skip button shows, negative values to disable skip button altogether
    skipTime: 5,
    allowSkip: true,
    jsNameSpace: 'appHandler'
  },
  ottPlayerLibrary;

  ottPlayerLibrary = function(options) {
    var settings = videojs.util.mergeOptions(defaults, options);
    var player = this;

    // Check if necessarily libraries are loaded correctly.
    if(player.ads === undefined) {
      window.console.error('This plugin requires videojs-contrib-ads, plugin not initialized');
      return null;
    } else {
      player.ads(options);
    }
    if (VMAP === undefined) {
      window.console.error('This plugin requires vmap-client-js, plugin not initialized');
      return null;
    }
    if (DMVAST === undefined) {
      window.console.error('This plugin requires vast-client-js, plugin not initialized');
      return null;
    } else {
      if (DMVAST.client.parse === undefined) {
        window.console.error('This plugin requires extra extensions managed by stevennick/vast-client-js, plugin not initialized');
        return null;
      }
    }
    // if (player.hls === undefined) {
    //   window.console.error("This plugin require videojs-contrib-hls and videojs-contrib-media-sources extensions, plugin not initialized.");
    //   return null;
    // }
    if (player.ottAdScheduler === undefined) {
      window.console.error("This plugin require ott-ad-scheduler extensions, plugin not initialized.");
      return null;
    } else {
      player.ottAdScheduler(settings);
    }

    // Hack: Fix aspectRatio error.
    player.on('play', function() {
      var origPos = player.currentTime();
      var ratioFix = function() {
        if ( origPos == player.currentTime() ) {
          // Do nothing
        } else {
          player.off('timeupdate', ratioFix);
          player.dimensions('99.9%');player.dimensions('100%');
        }
      };
      player.on('timeupdate', ratioFix);
    });

    //

    player.ready(function(event) {
      if (player.inAdMode == false && window[settings.jsNameSpace] != undefined) {
        window[settings.jsNameSpace].onReady();
      }
    });

    player.on('timeupdate', function(event) {
      if (player.inAdMode == false && window[settings.jsNameSpace] != undefined) {
        window[settings.jsNameSpace].timeUpdateEvent(player.currentTime());
      }
    });

    player.on('durationchange', function(event) {
      if (player.inAdMode == false && window[settings.jsNameSpace] != undefined) {
        window[settings.jsNameSpace].updateDurationEvent(player.duration());
      }
    });

    player.on('adstart', function(event) {
      if (window[settings.jsNameSpace] != undefined) {
        window[settings.jsNameSpace].adStartEvent();
      }
    });

    player.on('adend', function(event) {
      if (window[settings.jsNameSpace] != undefined) {
        window[settings.jsNameSpace].adEndEvent();
      }
    });

    var onCompletion = function(event) {
      console.log("OnCompletion Triggered by AD integration.");
      if (player.inAdMode == false && window[settings.jsNameSpace] != undefined) {
        window[settings.jsNameSpace].onCompletion();
      }
    };

    player.on('onCompletion', onCompletion);

//     player.on('ended', function(event) {
//       if (player.inAdMode == false) {
//         if (player.ottAdScheduler.hasPostroll) {
//           if (window[settings.jsNameSpace] != undefined) {
//             console.log("OnCompletion Triggered Directly.");
//             window[settings.jsNameSpace].onCompletion();
//           }
//         }
//       }
// //      if (player.inAdMode == false && window[settings.jsNameSpace] != undefined) {
// //        window[settings.jsNameSpace].onCompletion();
// //      } else {
// ////        player.one('onCompletion', onCompletion);
// //      }
//     });

    player.on('error', function(event) {
      if (window[settings.jsNameSpace] != undefined) {
        window[settings.jsNameSpace].onError(event);
      }
    });

//    player.on('progress', function(event) {   // Fired while the user agent is downloading media data
//      if (window[settings.jsNameSpace] != undefined) {
//        window[settings.jsNameSpace].onError();
//      }
//    });

//    player.on('seeking', function(event) {
//      if (player.inAdMode == false && window[settings.jsNameSpace] != undefined) {
//        window[settings.jsNameSpace].onSeeking();
//      }
//    });
//
//    player.on('seeked', function(event) {
//      if (player.inAdMode == false && window[settings.jsNameSpace] != undefined) {
//        window[settings.jsNameSpace].onSeeked();
//      }
//    });

    // replace initializer to adscheduler namespace.
    player.ottPlayerLibrary = {

      login: function(options, callback, errorCallback) {
        // var settings = videojs.util.mergeOptions(default, options);
        // For backward compatiable
        options.url = options.url + "?" +$.param(data, false);
        $.ajax({
          url: options.url,
          type: options.type,
          data: options.data,
          xhrFields: {
            withCredentials: options.withCredentials
          }
        }).success(callback).fail(errorCallback);
      },

      loadContent: function(options) {
        player.ready(function() {
          player.ottPlayerLibrary.VMAPSrc(options.vmap);
          player.src(options.src);
          player.play();
        });
      },

      VMAPSrc: function(src) {
        player.ottAdScheduler.requestUrl(src);
      },

      src: function(src) {
        player.src([{src: src, type: 'application/x-mpegURL'}]);
      },

      play: function() {
        player.play();
      },

      pause: function() {
        player.pause();
      },

      duration: function() {
        return player.duration();
      },

      currentTime: function(time) {
        return player.currentTime(time);
      },

      controls: function(controls) {
        return player.controls(controls);
      },

      dispose: function() {
        player.dispose();
      }
    };

  };

  // register the plugin
  videojs.plugin('ottPlayerLibrary', ottPlayerLibrary);
})(window, window.videojs);
